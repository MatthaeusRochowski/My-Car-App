const express = require('express');
const mongoose = require("mongoose");
const router  = express.Router();
const Car = require('../models/car');
const uploadInvoice = require("../config/cloudinary.js");

//contains routes for add, edit & delete
//show is done along with car-details

/*  */
const loginCheck = () => {
  return (req, res, next) => 
    (req.session.user ? next () : res.redirect('/'));
};

//Add Service - step 1
/*prefixed with /myaccount/service in app.js*/
router.get('/add/:carId', loginCheck(), (req, res, next) => {
  const carId = req.params.carId;
  const loggedUser = req.session.user;
  const datum = new Date();
  const heute = datum.getFullYear()+"-" + (datum.getMonth()+ 1)+"-" + datum.getDate();

  res.render('car/service-add', { user: loggedUser, carId: carId , heute: heute} );
})

//Add Service - step 2
/*prefixed with /myaccount/service in app.js*/
router.post('/add/:carId', [uploadInvoice.single("rechnung"), loginCheck()], (req, res, next) => {
  const carId = req.params.carId; //needed to add te service to the correct car
  const loggedUser = req.session.user;

  const datum = req.body.datum;
  const kilometerstand = req.body.kilometerstand;
  const reparaturposten = req.body.reparaturposten;
  const betrag = req.body.betrag;
  let rechnung;
  if (req.file) rechnung = req.file.url;
  
  //_id should be created & generated by mongoDB automatically
  const newService = {
    datum: datum,
    kilometerstand: kilometerstand,
    reparaturposten: reparaturposten,
    betrag: betrag,
    rechnungs_url: rechnung
  };

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        foundCar.werkstattbuch.unshift(newService);
        foundCar.save();
        res.redirect(`/myaccount/car-details/${foundCar._id}`);
      }
    })
    .catch(err => {
      next(err);
    });
});

//Edit Service - step 1
/*prefixed with /myaccount/service in app.js*/
router.get('/edit', loginCheck(), (req, res, next) => {
  const carId = req.query.carId;
  const serviceId = req.query.serviceId
  const loggedUser = req.session.user;

  let serviceForEdit = {};

  Car.findById({ '_id': mongoose.Types.ObjectId(carId) })
  .then(foundCar => {
    if (foundCar !== null) {
      for (let index in foundCar.werkstattbuch) {
        if (foundCar.werkstattbuch[index]._id.toString() === serviceId.toString()) {
          serviceForEdit = foundCar.werkstattbuch[index];
        }
      }
      res.render('car/service-edit', { user: loggedUser, carId: carId, service: serviceForEdit } );
    }
  })
  .catch(err => {
    next(err);
  });
})

//Edit Service - step 2
/*prefixed with /myaccount/service in app.js*/
router.post('/edit', [uploadInvoice.single("rechnung"), loginCheck()], (req, res, next) => {
  const carId = req.query.carId; //needed to add the service to the correct car
  const serviceId = req.query.serviceId;

  const loggedUser = req.session.user;

  const datum = req.body.datum;
  const kilometerstand = req.body.kilometerstand;
  const reparaturposten = req.body.reparaturposten;
  const betrag = req.body.betrag;
  let rechnung;
  if (req.file) rechnung = req.file.url;
  
  //_id should be created & generated by mongoDB automatically
  const updatedService = {
    datum: datum,
    kilometerstand: kilometerstand,
    reparaturposten: reparaturposten,
    betrag: betrag,
    rechnungs_url: rechnung
  }

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        for (let index in foundCar.werkstattbuch) {
          if (foundCar.werkstattbuch[index]._id.toString() === serviceId.toString()) {
            foundCar.werkstattbuch.splice(index,1,updatedService);
            foundCar.save();
          }
        }
        res.redirect(`/myaccount/car-details/${foundCar._id}`);
      }
    })
    .catch(err => {
      next(err);
    });
});

//Delete Service
/*prefixed with /myaccount/service in app.js*/
router.get('/delete', loginCheck(), (req, res, next) => {
  const carId = req.query.carId; //needed to add te service to the correct car
  const serviceId = req.query.serviceId;

  const loggedUser = req.session.user;

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        for (let index in foundCar.werkstattbuch) {
          if (foundCar.werkstattbuch[index]._id.toString() === serviceId.toString()) {
            foundCar.werkstattbuch.splice(index,1);
            foundCar.save();
          }
        }
        res.redirect(`/myaccount/car-details/${foundCar._id}`)
      }
    })
    .catch(err => {
      next(err);
    });
});

module.exports = router;
