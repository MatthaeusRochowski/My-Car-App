const express = require('express');
const mongoose = require("mongoose");
const router  = express.Router();
const Car = require('../models/car');

//contains routes for add, edit & delete
//show is done along with car-details

/*  */
const loginCheck = () => {
  return (req, res, next) => 
    (req.session.user ? next () : res.redirect('/'));
};

/* prefixed with /myaccount/tax in app.js*/
//Add Tax - step 1
router.get('/add/:carId', loginCheck(), (req, res, next) => {
  const carId = req.params.carId;
  const loggedUser = req.session.user;
  res.render('car/tax-add', { user: loggedUser, carId: carId } );
})

//Add Tax - step 2
/* prefixed with /myaccount/tax in app.js*/
router.post('/add/:carId', loginCheck(), (req, res, next) => {
  const carId = req.params.carId; //needed to add te insurance to the correct car
  const loggedUser = req.session.user;

  const typ = req.body.typ;
  const jahr = req.body.jahr;
  const betrag = req.body.betrag;
  
  //_id should be created & generated by mongoDB automatically
  const newTax = {
    typ: typ,
    jahr: jahr,
    betrag: betrag
  }

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        foundCar.steuerbuch.unshift(newTax);
        foundCar.save();
        res.redirect(`/myaccount/car-details/${foundCar._id}`);
      }
    })
    .catch(err => {
      next(err);
    });
});

/* prefixed with /myaccount/tax in app.js*/
//Edit Tax - step 1
router.get('/edit', loginCheck(), (req, res, next) => {
  const carId = req.query.carId;
  const taxId = req.query.taxId
  const loggedUser = req.session.user;

  let taxForEdit = {};

  Car.findById({ '_id': mongoose.Types.ObjectId(carId) })
  .then(foundCar => {
    if (foundCar !== null) {
      for (let index in foundCar.steuerbuch) {
        if (foundCar.steuerbuch[index]._id.toString() === taxId.toString()) {
          taxForEdit = foundCar.steuerbuch[index];
        }
      }
      res.render('car/tax-edit', { user: loggedUser, carId: carId, tax: taxForEdit } );
    }
  })
  .catch(err => {
    next(err);
  });
})

//Edit Tax - step 2
/* prefixed with /myaccount/tax in app.js*/
router.post('/edit', loginCheck(), (req, res, next) => {
  const carId = req.query.carId; //needed to add the tax entry to the correct car
  const taxId = req.query.taxId;

  const loggedUser = req.session.user;

  const typ = req.body.typ;
  const jahr = req.body.jahr;
  const betrag = req.body.betrag;
  
  //_id should be created & generated by mongoDB automatically
  const updatedTax = {
    typ: typ,
    jahr: jahr,
    betrag: betrag
  };

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        for (let index in foundCar.steuerbuch) {
          if (foundCar.steuerbuch[index]._id.toString() === taxId.toString()) {
            foundCar.steuerbuch.splice(index,1,updatedTax);
            foundCar.save();
          }
        }
        res.redirect(`/myaccount/car-details/${foundCar._id}`)
      }
    })
    .catch(err => {
      next(err);
    });
});

//Delete Tax
/* prefixed with /myaccount/tax in app.js*/
router.get('/delete', loginCheck(), (req, res, next) => {
  const carId = req.query.carId; //needed to add te insurance to the correct car
  const taxId = req.query.taxId;

  console.log("carId: " + carId);
  console.log("taxId: " + taxId);

  const loggedUser = req.session.user;

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        for (let index in foundCar.steuerbuch) {
          if (foundCar.steuerbuch[index]._id.toString() === taxId.toString()) {
            foundCar.steuerbuch.splice(index,1);
            foundCar.save();
          }
        }
        res.redirect(`/myaccount/car-details/${foundCar._id}`)
      }
    })
    .catch(err => {
      next(err);
    });
});

module.exports = router;
