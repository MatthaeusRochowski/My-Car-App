const express = require('express');
const mongoose = require("mongoose");
const router  = express.Router();
const Car = require('../models/car');

//contains routes for add, edit & delete
//show is done along with car-details

/*  */
const loginCheck = () => {
  return (req, res, next) => 
    (req.session.user ? next () : res.redirect('/'));
};

//Add fuelbook entry - step 1
/* prefixed with /myaccount/fuelbook in app.js*/
router.get('/add/:carId', loginCheck(), (req, res, next) => {
  const carId = req.params.carId;
  const loggedUser = req.session.user;
  const datum = new Date();
  const heute = datum.getFullYear()+"-" + (datum.getMonth()+ 1)+"-" + datum.getDate();
  
  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
  .then(foundCar => {
    let kilometerstand = foundCar.fahrtenbuch[0].kilometerstand_start;
    res.render('car/fuel-add', { user: loggedUser, carId: carId, heute: heute, kilometerstand: kilometerstand} );
  });
});

//Add fuelbook entry - step 2
/* prefixed with /myaccount/fuelbook in app.js*/
router.post('/add/:carId', loginCheck(), (req, res, next) => {
  const carId = req.params.carId;
  const loggedUser = req.session.user;

  //const { datum, kilometerstand, liter, literpreis, betrag } = req.body;
  const datum = req.body.datum;
  const kilometerstand = req.body.kilometerstand;
  const liter = req.body.liter;
  const literpreis = req.body.literpreis;
  const betrag = req.body.betrag;

  //auto correction of lacking entries
  if (((betrag !== "")&&(liter !== "")&&(literpreis !== ""))) {
    betrag = (liter * literpreis);
  }
  else if ((betrag === "")&&(liter !== "")&&(literpreis !== "")) {
    betrag = (liter * literpreis);
  }
  else if ((liter === "")&&(betrag !== "")&&(literpreis !== "")) {
    liter = (betrag / literpreis);
  }
  else if ((literpreis === "")&&(betrag !== "")&&(liter !== "")) {
    literpreis = (betrag / liter);
  }

  const newFuelbookEntry = {
    datum: datum,
    kilometerstand: kilometerstand,
    liter: liter,
    literpreis: literpreis,
    betrag: betrag
  };

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        foundCar.tankbuch.unshift(newFuelbookEntry);
        foundCar.save();
        res.redirect(`/myaccount/car-details/${foundCar._id}`);
      }
    })
    .catch(err => {
      next(err);
    });
});

//Edit fuelbook entry - step 1
/* prefixed with /myaccount/fuelbook in app.js*/
router.get('/edit', loginCheck(), (req, res, next) => {
  const carId = req.query.carId;
  const fuelbookId = req.query.fuelbookId
  const loggedUser = req.session.user;

  let fuelbookForEdit = {};

  Car.findById({ '_id': mongoose.Types.ObjectId(carId) })
  .then(foundCar => {
    if (foundCar !== null) {
      for (let index in foundCar.tankbuch) {
        if (foundCar.tankbuch[index]._id.toString() === fuelbookId.toString()) {
          fuelbookForEdit = foundCar.tankbuch[index];
        }
      }
      res.render('car/fuel-edit', { user: loggedUser, carId: carId, fuelbook: fuelbookForEdit } );
    }
  })
  .catch(err => {
    next(err);
  });
})

//Edit fuelbook entry - step 2
/* prefixed with /myaccount/fuelbook in app.js*/
router.post('/edit', loginCheck(), (req, res, next) => {
  const carId = req.query.carId; //needed to add the fuelbook entry to the correct car
  const fuelbookId = req.query.fuelbookId;

  const loggedUser = req.session.user;

  //const { datum, kilometerstand, liter, literpreis, betrag } = req.body;
  const datum = req.body.datum;
  const kilometerstand = req.body.kilometerstand;
  let liter = req.body.liter;
  let literpreis = req.body.literpreis;
  let betrag = req.body.betrag;

  //auto correction of lacking entries
  if (((betrag !== "")&&(liter !== "")&&(literpreis !== ""))) {
    betrag = (liter * literpreis);
  }
  else if ((betrag === "")&&(liter !== "")&&(literpreis !== "")) {
    betrag = (liter * literpreis);
  }
  else if ((liter === "")&&(betrag !== "")&&(literpreis !== "")) {
    liter = (betrag / literpreis);
  }
  else if ((literpreis === "")&&(betrag !== "")&&(liter !== "")) {
    literpreis = (betrag / liter);
  }

  //_id should be created & generated by mongoDB automatically
  const updatedFuelbook = {
    datum: datum,
    kilometerstand: kilometerstand,
    liter: liter,
    literpreis: literpreis,
    betrag: betrag
  };
  console.log(updatedFuelbook)
  
  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        for (let index in foundCar.tankbuch) {
          if (foundCar.tankbuch[index]._id.toString() === fuelbookId.toString()) {
            foundCar.tankbuch.splice(index,1,updatedFuelbook);
            foundCar.save();
          }
        }
        res.redirect(`/myaccount/car-details/${foundCar._id}`)
      }
    })
    .catch(err => {
      next(err);
    });
});

//Delete fuelbook entry
/* prefixed with /myaccount/fuelbook in app.js*/
router.get('/delete', loginCheck(), (req, res, next) => {
  const carId = req.query.carId; //needed to add te insurance to the correct car
  const fuelbookId = req.query.fuelbookId;

  const loggedUser = req.session.user;

  Car.findById({ _id: mongoose.Types.ObjectId(carId) })
    .then(foundCar => {
      if (foundCar !== null) {
        for (let index in foundCar.tankbuch) {
          if (foundCar.tankbuch[index]._id.toString() === fuelbookId.toString()) {
            foundCar.tankbuch.splice(index,1);
            foundCar.save();
          }
        }
        res.redirect(`/myaccount/car-details/${foundCar._id}`)
      }
    })
    .catch(err => {
      next(err);
    });
});

module.exports = router;
